import { GoogleGenAI, Modality } from "@google/genai";
import { fileToBase64 } from '../utils/fileUtils';

// Per coding guidelines, API key must be retrieved directly from process.env.API_KEY.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

interface ReunionPhotoParams {
  oldPhoto: File;
  newPhoto: File;
  style: string;
}

export const generateReunionPhoto = async ({
  oldPhoto,
  newPhoto,
  style,
}: ReunionPhotoParams): Promise<string> => {
  // Add a check here to provide a more user-friendly error if the key is missing.
  if (!process.env.API_KEY) {
    // This message is user-facing via the UI's error state.
    throw new Error("API key is not configured. Please check the environment setup.");
  }

  try {
    const oldPhotoBase64 = await fileToBase64(oldPhoto);
    const newPhotoBase64 = await fileToBase64(newPhoto);

    let prompt: string;

    if (style === 'Mirror Reflection') {
      prompt = `Generate one realistic photograph showing exactly two people only:

1️⃣ The adult version of the same person standing in front of a mirror, looking toward it.  
2️⃣ In the mirror reflection, show their younger (childhood) self.

Rules for composition and realism:
- The mirror must behave physically correct — show only the reflection, not a second duplicate standing in the room.  
- The reflection (child) appears **inside the mirror** only, matching real optical behavior.  
- The adult appears **outside the mirror**, partially facing it or in profile view.  
- Do not generate any third person or background duplicate.

Lighting and geometry:
- Keep light direction consistent between the real subject and the reflection.  
- The mirror surface shows correct reflection angle (use true optical perspective).  
- Add subtle mirror glare or rim-light for realism.  
- The reflection may have a soft blur or glass tint to distinguish it.

Environment and framing:
- Use a single mirror, waist-up or full-body composition.  
- Background simple and softly lit (bedroom, hall, or studio).  
- Both faces must match identity and emotion, with natural human expressions.  
- No ghosting, no second adult behind the mirror.

Visual tone:
- Photorealistic, cinematic lighting.  
- Natural reflections, proper symmetry.  
- Emotionally warm scene showing connection across time.`;
    } else {
        prompt = `Create a hyper-realistic reunion photo by seamlessly blending these two images of the same person at different ages. The younger version is in the first image, and the older version is in the second. The desired style is '${style}'. They should be interacting naturally, matching the style description. Harmonize their facial expressions and the overall lighting to create a cohesive and emotionally resonant image. The background should be replaced with a clean, smooth, off-white gradient.`;
    }
    
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image', // Nano Banana model
      contents: {
        parts: [
          {
            inlineData: {
              data: oldPhotoBase64,
              mimeType: oldPhoto.type,
            },
          },
          {
            inlineData: {
              data: newPhotoBase64,
              mimeType: newPhoto.type,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates[0].content.parts) {
        if (part.inlineData) {
          const base64ImageBytes: string = part.inlineData.data;
          const mimeType = part.inlineData.mimeType;
          return `data:${mimeType};base64,${base64ImageBytes}`;
        }
    }

    throw new Error("No image was generated by the AI.");
  } catch (error) {
    console.error("Error generating reunion photo:", error);
    if (error instanceof Error) {
        // Attempt to parse the message if it's a JSON string for a cleaner display.
        try {
            const parsedError = JSON.parse(error.message);
            const message = parsedError?.error?.message || error.message;
            throw new Error(`Failed to generate photo: ${message}`);
        } catch (e) {
            // If it's not JSON, use the message directly.
            throw new Error(`Failed to generate photo: ${error.message}`);
        }
    }
    throw new Error("An unknown error occurred during photo generation.");
  }
};
